[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "generic-kg-pipeline"
version = "0.1.0"
description = "A flexible, plugin-based pipeline system for extracting knowledge graphs from documents"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
maintainers = [
    {name = "Your Name", email = "your.email@example.com"},
]
keywords = [
    "knowledge-graph",
    "document-processing",
    "llm",
    "pipeline",
    "pdf-extraction",
    "semantic-web",
    "rdf",
    "sparql"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Linguistic",
]

dependencies = [
    "pydantic>=2.5.0",
    "pyyaml>=6.0.1",
    "fastapi>=0.104.1",
    "uvicorn>=0.24.0",
    "PyPDF2>=3.0.1",
    "python-docx>=0.8.11",
    "openpyxl>=3.1.2",
    "tiktoken>=0.5.2",
    "SPARQLWrapper>=2.0.0",
    "rdflib>=7.0.0",
    "chromadb>=0.4.22",
    "sentence-transformers>=2.2.2",
    "requests>=2.31.0",
    "httpx>=0.25.2",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "ruff>=0.1.9",
    "black>=23.12.1",
]

[project.urls]
"Homepage" = "https://github.com/your-org/generic-kg-pipeline"
"Bug Reports" = "https://github.com/your-org/generic-kg-pipeline/issues"
"Source" = "https://github.com/your-org/generic-kg-pipeline"
"Documentation" = "https://github.com/your-org/generic-kg-pipeline/wiki"

[project.scripts]
kg-pipeline = "api.main:main"

[tool.setuptools]
package-dir = {"" = "."}
packages = ["core", "plugins", "api", "tests"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.ttl"]

[tool.ruff]
line-length = 100
indent-width = 4
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ARG"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["core", "plugins", "api"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if False:",
]