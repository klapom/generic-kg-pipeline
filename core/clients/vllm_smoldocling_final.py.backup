"""
Final production-ready VLLMSmolDoclingClient with docling integration
Combines best of both approaches with direct image extraction
"""

from pathlib import Path
from typing import Dict, Any, List, Optional, Tuple
from dataclasses import dataclass, field
import time
import logging
import re
from concurrent.futures import ThreadPoolExecutor, as_completed

from pdf2image import convert_from_path
import fitz  # PyMuPDF

from core.vllm.base_client import BaseVLLMClient
from core.parsers.interfaces.data_models import (
    VisualElement, VisualElementType, DocumentType
)
from core.parsers import ParseError
from config.docling_config import get_config, should_use_docling_for_document

logger = logging.getLogger(__name__)


@dataclass
class SmolDoclingPage:
    """Enhanced page data with visual elements"""
    page_number: int
    text: str
    tables: List[Dict[str, Any]]
    images: List[Dict[str, Any]]
    formulas: List[Dict[str, Any]]
    visual_elements: List[VisualElement] = field(default_factory=list)
    layout_info: Dict[str, Any] = field(default_factory=dict)
    confidence_score: float = 0.0
    _docling_doc: Optional[Any] = None  # DoclingDocument when available


@dataclass
class SmolDoclingResult:
    """Enhanced result with integrated visual elements"""
    pages: List[SmolDoclingPage]
    visual_elements: List[VisualElement]  # All visual elements
    metadata: Dict[str, Any]
    processing_time_seconds: float
    model_version: str
    total_pages: int
    success: bool
    error_message: Optional[str] = None
    extraction_method: str = "legacy"  # legacy or docling


class VLLMSmolDoclingFinalClient(BaseVLLMClient):
    """
    Production-ready SmolDocling client with optional docling integration
    """
    
    # Default prompt for SmolDocling
    PROMPT_TEXT = "Convert this page to docling."
    
    def __init__(
        self,
        model_id: str = "smoldocling",
        max_pages: int = 30,
        gpu_memory_utilization: float = 0.3,
        environment: str = "development",
        **kwargs
    ):
        """
        Initialize SmolDocling client with configuration-based setup
        
        Args:
            environment: Environment for configuration (development/production/testing)
        """
        # Load configuration first
        self.config = get_config(environment)
        self.environment = environment
        
        # Basic settings
        self.max_pages = max_pages
        self.gpu_memory_utilization = gpu_memory_utilization
        
        # Configuration-driven settings
        self.use_docling = self.config["use_docling"]
        self.extract_images_directly = self.config["extract_images_directly"]
        self.fallback_to_legacy = self.config["fallback_to_legacy"]
        self.log_performance = self.config["log_performance"]
        
        # Import required classes for vLLM
        from core.vllm.model_manager import ModelConfig, SamplingConfig
        
        # Create model configuration
        model_config = ModelConfig(
            model_name="ds4sd/SmolDocling-256M-preview",
            gpu_memory_utilization=self.gpu_memory_utilization,
            max_model_len=8192,
            trust_remote_code=False,
            limit_mm_per_prompt={"image": 1},
            dtype="auto"
        )
        
        # Create sampling configuration
        sampling_config = SamplingConfig(
            temperature=0.0,
            max_tokens=8192
        )
        
        # Initialize parent class
        super().__init__(
            model_id=model_id,
            model_config=model_config,
            sampling_config=sampling_config,
            auto_load=False
        )
        
        # Check docling availability
        self._docling_available = False
        if self.use_docling:
            self._docling_available = self._check_docling()
            if not self._docling_available:
                logger.warning("Docling not available, using legacy parser")
                self.use_docling = False
    
    def _check_docling(self) -> bool:
        """Check if docling is available"""
        try:
            from docling_core.types.doc import DoclingDocument
            from docling_core.types.doc.document import DocTagsDocument
            return True
        except ImportError:
            return False
    
    def _get_document_hash(self, pdf_path: Path) -> str:
        """Generate consistent hash for document routing"""
        import hashlib
        
        # Use file path and size for consistent but privacy-aware hashing
        content = f"{pdf_path.name}_{pdf_path.stat().st_size}"
        return hashlib.md5(content.encode()).hexdigest()
    
    def parse_pdf(self, pdf_path: Path) -> SmolDoclingResult:
        """
        Parse PDF with configuration-based method selection
        """
        if not pdf_path.exists():
            raise FileNotFoundError(f"PDF not found: {pdf_path}")
        
        start_time = time.time()
        
        # Check document-specific routing for rollout
        document_hash = self._get_document_hash(pdf_path)
        should_use_docling = should_use_docling_for_document(document_hash, self.environment)
        
        # Performance logging
        if self.log_performance:
            logger.info(f"Processing {pdf_path.name} (hash: {document_hash[:8]})")
        
        # Check file size limits
        file_size_mb = pdf_path.stat().st_size / (1024 * 1024)
        max_size = self.config["memory_limits"]["max_pdf_size_mb"]
        
        if file_size_mb > max_size:
            logger.warning(f"PDF too large ({file_size_mb:.1f}MB > {max_size}MB), using legacy parser")
            should_use_docling = False
        
        # Decide which method to use
        try:
            if should_use_docling and self._docling_available and self.extract_images_directly:
                logger.info("Using docling with direct image extraction")
                result = self._parse_with_docling_direct(pdf_path)
            elif should_use_docling and self._docling_available:
                logger.info("Using docling with deferred image extraction") 
                result = self._parse_with_docling_deferred(pdf_path)
            else:
                logger.info("Using legacy parser")
                result = self._parse_legacy(pdf_path)
            
            # Performance logging
            if self.log_performance:
                processing_time = time.time() - start_time
                threshold = self.config["performance_threshold_seconds"]
                if processing_time > threshold:
                    logger.warning(f"Slow processing: {processing_time:.1f}s > {threshold}s for {pdf_path.name}")
                else:
                    logger.info(f"Processing completed in {processing_time:.1f}s")
            
            return result
            
        except Exception as e:
            if self.fallback_to_legacy and should_use_docling:
                logger.error(f"Docling parsing failed: {e}, falling back to legacy")
                return self._parse_legacy(pdf_path)
            else:
                raise
    
    def _parse_with_docling_direct(self, pdf_path: Path) -> SmolDoclingResult:
        """
        Parse with docling and extract images immediately
        RECOMMENDED APPROACH
        """
        from docling_core.types.doc import DoclingDocument
        from docling_core.types.doc.document import DocTagsDocument
        
        start_time = time.time()
        pages = []
        all_visual_elements = []
        
        try:
            # Open PDF once for image extraction
            pdf_doc = fitz.open(str(pdf_path))
            
            # Apply page limits from configuration
            max_pages_config = self.config["memory_limits"]["max_pages_per_batch"]
            actual_max_pages = min(self.max_pages, max_pages_config, pdf_doc.page_count)
            
            # Convert to images
            logger.info(f"Converting {pdf_path.name} to images (144 DPI), processing {actual_max_pages} pages...")
            page_images = convert_from_path(
                str(pdf_path),
                dpi=144,
                first_page=1,
                last_page=actual_max_pages,
                fmt='PNG'
            )
            
            # Ensure model is loaded
            self._ensure_model_loaded()
            
            # Process pages
            for page_num, page_image in enumerate(page_images, 1):
                logger.info(f"Processing page {page_num}/{len(page_images)}...")
                
                try:
                    # Generate DocTags
                    doctags = self._generate_doctags(page_image)
                    
                    # Parse with docling
                    doctags_doc = DocTagsDocument.from_doctags_and_image_pairs(
                        [doctags], 
                        [page_image]
                    )
                    
                    doc = DoclingDocument(name=f"Page_{page_num}")
                    doc.load_from_doctags(doctags_doc)
                    
                    # Extract visuals WITH images
                    visual_elements = self._extract_visuals_direct(
                        doc, pdf_doc, page_num, page_image
                    )
                    all_visual_elements.extend(visual_elements)
                    
                    # Create page
                    page = self._create_page_from_docling(
                        doc, page_num, visual_elements, doctags
                    )
                    pages.append(page)
                    
                except Exception as e:
                    logger.error(f"Failed to process page {page_num}: {e}")
                    # Create empty page
                    pages.append(SmolDoclingPage(
                        page_number=page_num,
                        text=f"[Error processing page: {str(e)}]",
                        tables=[], images=[], formulas=[],
                        visual_elements=[], layout_info={},
                        confidence_score=0.0
                    ))
            
            pdf_doc.close()
            
            return SmolDoclingResult(
                pages=pages,
                visual_elements=all_visual_elements,
                metadata={
                    "filename": pdf_path.name,
                    "page_count": len(pages),
                    "visual_count": len(all_visual_elements)
                },
                processing_time_seconds=time.time() - start_time,
                model_version="smoldocling-docling-direct",
                total_pages=len(pages),
                success=True,
                extraction_method="docling"
            )
            
        except Exception as e:
            logger.error(f"Docling parsing failed: {e}")
            if hasattr(locals(), 'pdf_doc'):
                pdf_doc.close()
            
            # Fallback to legacy
            logger.info("Falling back to legacy parser")
            return self._parse_legacy(pdf_path)
    
    def _generate_doctags(self, page_image) -> str:
        """Generate DocTags for a page using vLLM"""
        # Create chat template
        chat_template = f"<|im_start|>User:<image>{self.PROMPT_TEXT}<end_of_utterance>\nAssistant:"
        
        # Create multimodal input
        multimodal_input = {
            "prompt": chat_template,
            "multi_modal_data": {"image": page_image}
        }
        
        # Generate
        from vllm import SamplingParams
        sampling_params = SamplingParams(
            temperature=0.0,
            max_tokens=8192,
            skip_special_tokens=False
        )
        
        model = self.model_manager._models[self.model_id]
        outputs = model.generate(multimodal_input, sampling_params)
        
        if outputs and outputs[0].outputs:
            return outputs[0].outputs[0].text
        
        raise ParseError("No output from model")
    
    def _extract_visuals_direct(
        self, 
        doc,  # DoclingDocument
        pdf_doc,  # fitz.Document
        page_num: int,
        page_image  # PIL.Image
    ) -> List[VisualElement]:
        """Extract visuals with images directly"""
        visual_elements = []
        page = pdf_doc[page_num - 1]
        
        # Get scaling factors
        page_rect = page.rect
        scale_x = page_rect.width / 500.0
        scale_y = page_rect.height / 500.0
        
        # Build list of element types to extract based on configuration
        extract_types = ['picture', 'image', 'figure', 'chart', 'diagram']
        if self.config["image_extraction"]["extract_tables_as_images"]:
            extract_types.append('table')
        if self.config["image_extraction"]["extract_formulas_as_images"]:
            extract_types.append('formula')
        
        for element in doc.elements:
            if element.type in extract_types:
                # Get bbox
                bbox = self._extract_bbox(element)
                
                if bbox:
                    try:
                        # Scale and extract
                        x0, y0, x1, y1 = [
                            bbox[0] * scale_x,
                            bbox[1] * scale_y,
                            bbox[2] * scale_x,
                            bbox[3] * scale_y
                        ]
                        
                        rect = fitz.Rect(x0, y0, x1, y1)
                        
                        # Apply configuration-based image extraction settings
                        max_size = self.config["image_extraction"]["max_image_size"]
                        rect_width = rect.width
                        rect_height = rect.height
                        
                        # Calculate appropriate zoom to respect max_image_size
                        zoom = min(2.0, max_size / max(rect_width, rect_height)) if max(rect_width, rect_height) > 0 else 2.0
                        mat = fitz.Matrix(zoom, zoom)
                        
                        pix = page.get_pixmap(matrix=mat, clip=rect)
                        
                        # Use configured image quality for PNG
                        img_bytes = pix.tobytes("png")
                        
                        # Create visual element
                        visual = VisualElement(
                            element_type=self._map_element_type(element.type),
                            source_format=DocumentType.PDF,
                            content_hash=VisualElement.create_hash(img_bytes),
                            page_or_slide=page_num,
                            bounding_box=bbox,
                            raw_data=img_bytes,
                            analysis_metadata={
                                "caption": getattr(element, 'caption', ''),
                                "extracted_by": "docling_direct",
                                "original_type": element.type,
                                "raw_bbox": bbox
                            }
                        )
                        visual_elements.append(visual)
                        
                        logger.debug(
                            f"Extracted {element.type}: "
                            f"page={page_num}, bbox={bbox}, "
                            f"size={len(img_bytes)} bytes"
                        )
                        
                    except Exception as e:
                        logger.warning(f"Failed to extract visual: {e}")
        
        return visual_elements
    
    def _extract_bbox(self, element) -> Optional[List[int]]:
        """Extract bbox from various sources"""
        # Try element.bbox
        if hasattr(element, 'bbox'):
            bbox = element.bbox
            if hasattr(bbox, 'x0'):
                return [int(bbox.x0), int(bbox.y0), 
                       int(bbox.x1), int(bbox.y1)]
            elif isinstance(bbox, (list, tuple)) and len(bbox) >= 4:
                return [int(x) for x in bbox[:4]]
        
        # Try parsing from string
        element_str = str(element)
        
        # Pattern 1: <loc_x><loc_y>...
        loc_match = re.search(
            r'<loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)>', 
            element_str
        )
        if loc_match:
            return [int(loc_match.group(i)) for i in range(1, 5)]
        
        # Pattern 2: x>y>x2>y2>
        coord_match = re.search(
            r'(\d+)>(\d+)>(\d+)>(\d+)>', 
            element_str
        )
        if coord_match:
            return [int(coord_match.group(i)) for i in range(1, 5)]
        
        return None
    
    def _map_element_type(self, docling_type: str) -> VisualElementType:
        """Map docling type to our type"""
        mapping = {
            'picture': VisualElementType.IMAGE,
            'image': VisualElementType.IMAGE,
            'figure': VisualElementType.FIGURE,
            'chart': VisualElementType.CHART,
            'diagram': VisualElementType.DIAGRAM,
            'graph': VisualElementType.GRAPH,
            'table': VisualElementType.TABLE_IMAGE,
            'formula': VisualElementType.FORMULA
        }
        return mapping.get(docling_type, VisualElementType.UNKNOWN_VISUAL)
    
    def _create_page_from_docling(
        self, 
        doc,  # DoclingDocument
        page_num: int,
        visual_elements: List[VisualElement],
        raw_doctags: str
    ) -> SmolDoclingPage:
        """Create page from DoclingDocument"""
        # Extract content
        text_parts = []
        tables = []
        formulas = []
        images = []
        
        for element in doc.elements:
            if element.type == 'text':
                text_parts.append(self._get_text(element))
            elif element.type == 'table':
                tables.append({
                    "content": self._table_to_text(element),
                    "format": "text"
                })
            elif element.type == 'formula':
                formulas.append({
                    "latex": self._get_text(element),
                    "type": "formula"
                })
        
        # Create images for compatibility
        for ve in visual_elements:
            images.append({
                "bbox": ve.bounding_box,
                "caption": ve.analysis_metadata.get("caption", ""),
                "type": ve.element_type.value,
                "has_data": ve.raw_data is not None
            })
        
        return SmolDoclingPage(
            page_number=page_num,
            text="\n\n".join(text_parts),
            tables=tables,
            images=images,
            formulas=formulas,
            visual_elements=visual_elements,
            layout_info={
                "raw_content": raw_doctags[:1000] + "...",
                "source": "docling",
                "element_counts": {
                    "text": len(text_parts),
                    "tables": len(tables),
                    "images": len(images),
                    "formulas": len(formulas)
                }
            },
            confidence_score=1.0,
            _docling_doc=doc
        )
    
    def _get_text(self, element) -> str:
        """Get text from element"""
        if hasattr(element, 'text'):
            return element.text
        elif hasattr(element, 'content'):
            return element.content
        return str(element)
    
    def _table_to_text(self, element) -> str:
        """Convert table to text"""
        if hasattr(element, 'to_markdown'):
            return element.to_markdown()
        elif hasattr(element, 'to_text'):
            return element.to_text()
        return str(element)
    
    def _ensure_model_loaded(self):
        """Ensure vLLM model is loaded"""
        if not self.model_manager.is_model_loaded(self.model_id):
            logger.info("Loading SmolDocling model...")
            self.model_manager.load_model(
                self.model_id,
                self.model_config
            )
    
    def _parse_legacy(self, pdf_path: Path) -> SmolDoclingResult:
        """Legacy parsing without docling"""
        # This would use the existing implementation
        # from vllm_smoldocling_local.py
        from core.clients.vllm_smoldocling_local import VLLMSmolDoclingClient
        legacy_client = VLLMSmolDoclingClient()
        return legacy_client.parse_pdf(pdf_path)
    
    def parse_model_output(self, output: Any) -> Dict[str, Any]:
        """
        Parse model output for compatibility with BaseVLLMClient
        Note: This client primarily uses parse_pdf with docling integration
        """
        try:
            # Extract text from vLLM output
            if hasattr(output, 'outputs') and output.outputs:
                content = output.outputs[0].text
            elif hasattr(output, 'text'):
                content = output.text
            else:
                content = str(output)
            
            # For compatibility, return basic structure
            # In practice, this client uses parse_pdf with docling integration
            return {
                "text": content.strip(),
                "tables": [],
                "images": [],  # Images are handled by parse_pdf with direct extraction
                "formulas": [],
                "code_blocks": [],
                "text_blocks": [{"text": content.strip(), "bbox": None}],
                "titles": [],
                "layout_info": {
                    "raw_content": content,
                    "source": "final_client_fallback",
                    "note": "Use parse_pdf for full docling integration"
                },
                "confidence_score": 1.0 if content.strip() else 0.0
            }
            
        except Exception as e:
            logger.error(f"Failed to parse model output: {e}")
            return {
                "text": "",
                "tables": [],
                "images": [],
                "formulas": [],
                "code_blocks": [],
                "text_blocks": [],
                "titles": [],
                "layout_info": {"error": str(e)},
                "confidence_score": 0.0
            }
    
    def _parse_with_docling_deferred(self, pdf_path: Path) -> SmolDoclingResult:
        """Parse with docling but defer image extraction"""
        # This would be similar to _parse_with_docling_direct
        # but without immediate image extraction
        # Images would be extracted later by HybridPDFParser
        pass